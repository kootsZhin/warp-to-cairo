{
    "cairo_code": "%lang starknet\n\nfrom evm.array import validate_array\nfrom evm.calls import calldataload, calldatasize, caller\nfrom evm.exec_env import ExecutionEnvironment\nfrom evm.hashing import uint256_pedersen\nfrom evm.memory import uint256_mload, uint256_mstore\nfrom evm.uint256 import is_eq, is_gt, is_lt, is_zero, slt, u256_add, u256_shr\nfrom evm.yul_api import warp_return\nfrom starkware.cairo.common.cairo_builtins import BitwiseBuiltin, HashBuiltin\nfrom starkware.cairo.common.default_dict import default_dict_finalize, default_dict_new\nfrom starkware.cairo.common.dict_access import DictAccess\nfrom starkware.cairo.common.registers import get_fp_and_pc\nfrom starkware.cairo.common.uint256 import Uint256, uint256_not, uint256_sub\n\nfunc __warp_identity_Uint256(arg0 : Uint256) -> (arg0 : Uint256):\n    return (arg0)\nend\n\nfunc __warp_constant_0() -> (res : Uint256):\n    return (Uint256(low=0, high=0))\nend\n\nfunc sstore{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        key : Uint256, value : Uint256):\n    evm_storage.write(key, value)\n    return ()\nend\n\nfunc sload{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(key : Uint256) -> (\n        value : Uint256):\n    let (value) = evm_storage.read(key)\n    return (value)\nend\n\n@storage_var\nfunc evm_storage(arg0 : Uint256) -> (res : Uint256):\nend\n\n@constructor\nfunc constructor{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        calldata_size, calldata_len, calldata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    with memory_dict, msize:\n        __constructor_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return ()\nend\n\n@external\nfunc __main{\n        bitwise_ptr : BitwiseBuiltin*, pedersen_ptr : HashBuiltin*, range_check_ptr,\n        syscall_ptr : felt*}(calldata_size, calldata_len, calldata : felt*) -> (\n        returndata_size, returndata_len, returndata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (__fp__, _) = get_fp_and_pc()\n    local exec_env_ : ExecutionEnvironment = ExecutionEnvironment(calldata_size=calldata_size, calldata_len=calldata_len, calldata=calldata, returndata_size=0, returndata_len=0, returndata=cast(0, felt*), to_returndata_size=0, to_returndata_len=0, to_returndata=cast(0, felt*))\n    let exec_env : ExecutionEnvironment* = &exec_env_\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    let termination_token = 0\n    with exec_env, memory_dict, msize, termination_token:\n        __main_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return (exec_env.to_returndata_size, exec_env.to_returndata_len, exec_env.to_returndata)\nend\n\nfunc __constructor_meat{\n        memory_dict : DictAccess*, msize, pedersen_ptr : HashBuiltin*, range_check_ptr,\n        syscall_ptr : felt*}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = __warp_identity_Uint256(Uint256(low=128, high=0))\n    uint256_mstore(offset=Uint256(low=64, high=0), value=__warp_subexpr_0)\n    let (__warp_subexpr_1 : Uint256) = __warp_constant_0()\n    if __warp_subexpr_1.low + __warp_subexpr_1.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    sstore(key=Uint256(low=1, high=0), value=Uint256(low=100000000000000, high=0))\n    return ()\nend\n\nfunc abi_decode{range_check_ptr}(dataEnd : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        dataEnd,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=0, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return ()\n    end\nend\n\nfunc abi_encode_uint256{memory_dict : DictAccess*, msize, range_check_ptr}(\n        headStart : Uint256, value0 : Uint256) -> (tail : Uint256):\n    alloc_locals\n    let (tail : Uint256) = u256_add(headStart, Uint256(low=32, high=0))\n    uint256_mstore(offset=headStart, value=value0)\n    return (tail)\nend\n\nfunc abi_decode_addresst_addresst_uint256{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, range_check_ptr}(\n        dataEnd : Uint256) -> (value0 : Uint256, value1 : Uint256, value2 : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        dataEnd,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=96, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (value0 : Uint256) = calldataload(Uint256(low=4, high=0))\n    let (value1 : Uint256) = calldataload(Uint256(low=36, high=0))\n    let (value2 : Uint256) = calldataload(Uint256(low=68, high=0))\n    return (value0, value1, value2)\nend\n\nfunc checked_add_uint256{range_check_ptr}(x : Uint256, y : Uint256) -> (sum : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = uint256_not(y)\n    let (__warp_subexpr_0 : Uint256) = is_gt(x, __warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (sum : Uint256) = u256_add(x, y)\n    return (sum)\nend\n\nfunc fun_transfer{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_sender : Uint256, var_recipient : Uint256, var_amount : Uint256) -> ():\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_sender)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (_2 : Uint256) = sload(__warp_subexpr_0)\n    let (__warp_subexpr_1 : Uint256) = is_lt(_2, var_amount)\n    if __warp_subexpr_1.low + __warp_subexpr_1.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_sender)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_3 : Uint256) = uint256_sub(_2, var_amount)\n    let (__warp_subexpr_2 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    sstore(key=__warp_subexpr_2, value=__warp_subexpr_3)\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_recipient)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (dataSlot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (__warp_subexpr_5 : Uint256) = sload(dataSlot)\n    let (__warp_subexpr_4 : Uint256) = checked_add_uint256(__warp_subexpr_5, var_amount)\n    sstore(key=dataSlot, value=__warp_subexpr_4)\n    return ()\nend\n\nfunc fun_transferFrom{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_sender : Uint256, var_recipient : Uint256, var_amount : Uint256) -> (var : Uint256):\n    alloc_locals\n    fun_transfer(var_sender, var_recipient, var_amount)\n    let var : Uint256 = Uint256(low=1, high=0)\n    return (var)\nend\n\nfunc abi_encode_bool{memory_dict : DictAccess*, msize, range_check_ptr}(\n        headStart : Uint256, value0 : Uint256) -> (tail : Uint256):\n    alloc_locals\n    let (tail : Uint256) = u256_add(headStart, Uint256(low=32, high=0))\n    let (__warp_subexpr_1 : Uint256) = is_zero(value0)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    uint256_mstore(offset=headStart, value=__warp_subexpr_0)\n    return (tail)\nend\n\nfunc abi_encode_uint8{memory_dict : DictAccess*, msize, range_check_ptr}(headStart : Uint256) -> (\n        tail : Uint256):\n    alloc_locals\n    let (tail : Uint256) = u256_add(headStart, Uint256(low=32, high=0))\n    uint256_mstore(offset=headStart, value=Uint256(low=18, high=0))\n    return (tail)\nend\n\nfunc abi_decode_addresst_uint256{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, range_check_ptr}(\n        dataEnd : Uint256) -> (value0 : Uint256, value1 : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        dataEnd,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=64, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (value0 : Uint256) = calldataload(Uint256(low=4, high=0))\n    let (value1 : Uint256) = calldataload(Uint256(low=36, high=0))\n    return (value0, value1)\nend\n\nfunc fun_mint{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_to : Uint256, var_amount : Uint256) -> (var : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_to)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (dataSlot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (__warp_subexpr_1 : Uint256) = sload(dataSlot)\n    let (__warp_subexpr_0 : Uint256) = checked_add_uint256(__warp_subexpr_1, var_amount)\n    sstore(key=dataSlot, value=__warp_subexpr_0)\n    let var : Uint256 = Uint256(low=1, high=0)\n    return (var)\nend\n\nfunc abi_decode_address{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, range_check_ptr}(\n        dataEnd : Uint256) -> (value0 : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        dataEnd,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=32, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (value0 : Uint256) = calldataload(Uint256(low=4, high=0))\n    return (value0)\nend\n\nfunc getter_fun_balances{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(key : Uint256) -> (\n        ret__warp_mangled : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=key)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (ret__warp_mangled : Uint256) = sload(__warp_subexpr_0)\n    return (ret__warp_mangled)\nend\n\nfunc fun_balanceOf{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_account : Uint256) -> (var_ : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_account)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (var_ : Uint256) = sload(__warp_subexpr_0)\n    return (var_)\nend\n\nfunc fun_transfer_73{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_recipient : Uint256, var_amount : Uint256) -> (var : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = caller()\n    fun_transfer(__warp_subexpr_0, var_recipient, var_amount)\n    let var : Uint256 = Uint256(low=1, high=0)\n    return (var)\nend\n\nfunc __warp_block_2{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(_1 : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    abi_decode(__warp_subexpr_0)\n    let (__warp_subexpr_3 : Uint256) = sload(Uint256(low=1, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_uint256(_1, __warp_subexpr_3)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, _1)\n    warp_return(_1, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_4{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param : Uint256, param_1 : Uint256,\n        param_2 : Uint256) = abi_decode_addresst_addresst_uint256(__warp_subexpr_0)\n    let (ret__warp_mangled : Uint256) = fun_transferFrom(param, param_1, param_2)\n    let (memPos : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_bool(memPos, ret__warp_mangled)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos)\n    warp_return(memPos, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_6{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    abi_decode(__warp_subexpr_0)\n    let (memPos_1 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_uint8(memPos_1)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_1)\n    warp_return(memPos_1, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_8{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    abi_decode(__warp_subexpr_0)\n    let (ret_1 : Uint256) = sload(Uint256(low=1, high=0))\n    let (memPos_2 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_uint256(memPos_2, ret_1)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_2)\n    warp_return(memPos_2, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_10{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param_3 : Uint256, param_4 : Uint256) = abi_decode_addresst_uint256(__warp_subexpr_0)\n    let (ret_2 : Uint256) = fun_mint(param_3, param_4)\n    let (memPos_3 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_bool(memPos_3, ret_2)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_3)\n    warp_return(memPos_3, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_12{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = calldatasize()\n    let (__warp_subexpr_0 : Uint256) = abi_decode_address(__warp_subexpr_1)\n    let (ret_3 : Uint256) = getter_fun_balances(__warp_subexpr_0)\n    let (memPos_4 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_3 : Uint256) = abi_encode_uint256(memPos_4, ret_3)\n    let (__warp_subexpr_2 : Uint256) = uint256_sub(__warp_subexpr_3, memPos_4)\n    warp_return(memPos_4, __warp_subexpr_2)\n    return ()\nend\n\nfunc __warp_block_14{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = calldatasize()\n    let (__warp_subexpr_0 : Uint256) = abi_decode_address(__warp_subexpr_1)\n    let (ret_4 : Uint256) = fun_balanceOf(__warp_subexpr_0)\n    let (memPos_5 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_3 : Uint256) = abi_encode_uint256(memPos_5, ret_4)\n    let (__warp_subexpr_2 : Uint256) = uint256_sub(__warp_subexpr_3, memPos_5)\n    warp_return(memPos_5, __warp_subexpr_2)\n    return ()\nend\n\nfunc __warp_block_16{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param_5 : Uint256, param_6 : Uint256) = abi_decode_addresst_uint256(__warp_subexpr_0)\n    let (ret_5 : Uint256) = fun_transfer_73(param_5, param_6)\n    let (memPos_6 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_bool(memPos_6, ret_5)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_6)\n    warp_return(memPos_6, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_if_0{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_16()\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_15{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=2835717307, high=0))\n    __warp_if_0(__warp_subexpr_0)\n    return ()\nend\n\nfunc __warp_if_1{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_14()\n        return ()\n    else:\n        __warp_block_15(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_13{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1889567281, high=0))\n    __warp_if_1(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_2{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_12()\n        return ()\n    else:\n        __warp_block_13(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_11{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1857877511, high=0))\n    __warp_if_2(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_3{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_10()\n        return ()\n    else:\n        __warp_block_11(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_9{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1086394137, high=0))\n    __warp_if_3(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_4{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_8()\n        return ()\n    else:\n        __warp_block_9(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_7{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1051392107, high=0))\n    __warp_if_4(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_5{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_6()\n        return ()\n    else:\n        __warp_block_7(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_5{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=826074471, high=0))\n    __warp_if_5(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_6{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_4()\n        return ()\n    else:\n        __warp_block_5(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_3{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=599290589, high=0))\n    __warp_if_6(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_7{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(_1 : Uint256, __warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_2(_1)\n        return ()\n    else:\n        __warp_block_3(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_1{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(_1 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=404098525, high=0))\n    __warp_if_7(_1, __warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_block_0{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(_1 : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldataload(Uint256(low=0, high=0))\n    let (match_var : Uint256) = u256_shr(Uint256(low=224, high=0), __warp_subexpr_0)\n    __warp_block_1(_1, match_var)\n    return ()\nend\n\nfunc __warp_if_8{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(_1 : Uint256, __warp_subexpr_0 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_0(_1)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __main_meat{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (_1 : Uint256) = __warp_identity_Uint256(Uint256(low=128, high=0))\n    uint256_mstore(offset=Uint256(low=64, high=0), value=_1)\n    let (__warp_subexpr_2 : Uint256) = calldatasize()\n    let (__warp_subexpr_1 : Uint256) = is_lt(__warp_subexpr_2, Uint256(low=4, high=0))\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    __warp_if_8(_1, __warp_subexpr_0)\n    if termination_token == 1:\n        return ()\n    end\n    assert 0 = 1\n    jmp rel 0\nend\n",
    "sol_abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "_balances",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "_totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "mint",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ]
}